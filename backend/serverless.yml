service:
  name: sls-twitter

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    TWITTER_TABLE: Twitter-${self:provider.stage}
    POST_DATE_INDEX: PostDateIndex

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetPosts:
    handler: src/lambda/http/getPosts.handler
    events:
      - http:
          method: get
          path: posts
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWITTER_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'

  CreatePost:
    handler: src/lambda/http/createPost.handler
    events:
      - http:
          method: post
          path: posts
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-post-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWITTER_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'

  UpdatePost:
    handler: src/lambda/http/updatePost.handler
    events:
      - http:
          method: patch
          path: posts/{postId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/update-post-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          -  dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWITTER_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords 
        Resource: '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TwitterDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: postId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: postId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TWITTER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.POST_DATE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
